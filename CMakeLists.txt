cmake_minimum_required(VERSION 3.5)


message(STATUS "QT ROOT is $ENV{QT_ROOT}")
set(CMAKE_PREFIX_PATH $ENV{QT_ROOT})

project(BedrockMap VERSION 0.1 LANGUAGES CXX)
set(CMAKE_INCLUDE_CURRENT_DIR ON)

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
# include bedrock-lib from absolute path

set(BEDROCK_LEVEL_ROOT "${PROJECT_SOURCE_DIR}/bedrock-level")

set(BEDROCK_LIBS
        ${BEDROCK_LEVEL_ROOT}/build/libbedrock-level.a
        ${BEDROCK_LEVEL_ROOT}/libs/libleveldb.a
        ${BEDROCK_LEVEL_ROOT}/libs/libz.a
)

include_directories(
        ${BEDROCK_LEVEL_ROOT}/src/include
        ${BEDROCK_LEVEL_ROOT}/third
        ${PROJECT_SOURCE_DIR}/src/include
        # for clangd
        ${CMAKE_CURRENT_BINARY_DIR}/BedrockMap_autogen/include
)

find_package(QT NAMES Qt6 Qt5 COMPONENTS Widgets Concurrent Core5Compat REQUIRED)
find_package(Qt${QT_VERSION_MAJOR} COMPONENTS Widgets Concurrent Core5Compat REQUIRED)

set(APP_ICON_RESOURCE_WINDOWS "${CMAKE_CURRENT_SOURCE_DIR}/icon.rc")

file(GLOB_RECURSE SRC_FILES
        src/*.ui
        src/*.cpp
        src/include/*.h
)

add_executable(BedrockMap
        ${SRC_FILES}
        ${APP_ICON_RESOURCE_WINDOWS}
        icon.qrc
)

target_link_libraries(BedrockMap PRIVATE
        Qt${QT_VERSION_MAJOR}::Widgets
        Qt${QT_VERSION_MAJOR}::Concurrent
        Qt6::Core5Compat
        zstd
        snappy
        ${BEDROCK_LIBS})

if (CMAKE_BUILD_TYPE STREQUAL "Release")
    set_property(TARGET BedrockMap PROPERTY WIN32_EXECUTABLE true)
endif ()

if (QT_VERSION_MAJOR EQUAL 6)
    qt_finalize_executable(BedrockMap)
endif ()
